<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\BaseLinkerService;

class BaseLinkerSetup extends Command
{
    protected $signature = 'baselinker:setup';
    protected $description = 'Sprawdza i konfiguruje po≈ÇƒÖczenie z BaseLinker';

    public function handle()
    {
        $this->info('üîß Sprawdzanie konfiguracji BaseLinker...');
        
        // Sprawd≈∫ token
        $token = config('baselinker.token');
        if (empty($token)) {
            $this->error('‚ùå BaseLinker API token nie jest skonfigurowany');
            $this->warn('Dodaj BASELINKER_API_TOKEN do pliku .env');
            $this->line('Przyk≈Çad:');
            $this->line('BASELINKER_API_TOKEN=your_token_here');
            return 1;
        }
        
        $this->info('‚úÖ Token API jest ustawiony');
        
        // Test po≈ÇƒÖczenia
        $this->info('üåê Testowanie po≈ÇƒÖczenia z BaseLinker...');
        
        try {
            $service = app(BaseLinkerService::class);
            
            if (!$service->isConfigured()) {
                $this->error('‚ùå Serwis BaseLinker nie jest skonfigurowany');
                return 1;
            }
            
            if ($service->testConnection()) {
                $this->info('‚úÖ Po≈ÇƒÖczenie z BaseLinker dzia≈Ça poprawnie');
                
                // Poka≈º dostƒôpne katalogi
                // try {
                //     $catalogs = $service->getCatalogs();
                //     $this->info('üìÅ Dostƒôpne katalogi produkt√≥w:');
                //     foreach ($catalogs as $catalog) {
                //         $this->line("  - {$catalog['catalog_id']}: {$catalog['name']}");
                //     }
                // } catch (\Exception $e) {
                //     $this->warn('‚ö†Ô∏è  Nie uda≈Ço siƒô pobraƒá katalog√≥w: ' . $e->getMessage());
                // }
                
                // Poka≈º magazyny
                try {
                    $warehouses = $service->getInventoryWarehouses();
                    $this->info('üè™ Dostƒôpne magazyny:');
                    foreach ($warehouses as $warehouse) {
                        $this->line("  - {$warehouse['warehouse_id']}: {$warehouse['name']}");
                    }
                } catch (\Exception $e) {
                    $this->warn('‚ö†Ô∏è  Nie uda≈Ço siƒô pobraƒá magazyn√≥w: ' . $e->getMessage());
                }
                
            } else {
                $this->error('‚ùå Po≈ÇƒÖczenie z BaseLinker nie dzia≈Ça');
                $this->warn('Sprawd≈∫ token API i po≈ÇƒÖczenie internetowe');
                return 1;
            }
            
        } catch (\Exception $e) {
            $this->error('‚ùå B≈ÇƒÖd podczas testowania: ' . $e->getMessage());
            return 1;
        }
        
        // Sprawd≈∫ konfiguracjƒô
        $this->info('‚öôÔ∏è  Sprawdzanie konfiguracji...');
        
        $config = config('baselinker');
        $this->table(['Ustawienie', 'Warto≈õƒá'], [
            // ['Default Catalog ID', $config['default_catalog_id'] ?? 'nie ustawione'],
            ['Default Inventory ID', $config['default_inventory_id'] ?? 'nie ustawione'],
            ['Default Warehouse ID', $config['default_warehouse_id'] ?? 'nie ustawione'],
            ['Sync Enabled', $config['sync_enabled'] ? 'tak' : 'nie'],
            ['Batch Size', $config['batch_size'] ?? 'nie ustawione'],
        ]);
        
        $this->info('üéâ Konfiguracja BaseLinker zosta≈Ça sprawdzona!');
        
        // Poka≈º dostƒôpne komendy
        $this->info('üìù Dostƒôpne komendy:');
        $this->line('  php artisan baselinker:sync --products     # Synchronizacja produkt√≥w');
        $this->line('  php artisan baselinker:sync --stock        # Synchronizacja stan√≥w');
        $this->line('  php artisan baselinker:sync-orders --days=7 # Synchronizacja zam√≥wie≈Ñ');
        
        return 0;
    }
}